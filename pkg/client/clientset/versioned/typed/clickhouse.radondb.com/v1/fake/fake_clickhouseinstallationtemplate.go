// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clickhouseradondbcomv1 "github.com/TCeason/clickhouse-operator/pkg/apis/clickhouse.radondb.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClickHouseInstallationTemplates implements ClickHouseInstallationTemplateInterface
type FakeClickHouseInstallationTemplates struct {
	Fake *FakeClickhouseV1
	ns   string
}

var clickhouseinstallationtemplatesResource = schema.GroupVersionResource{Group: "clickhouse.radondb.com", Version: "v1", Resource: "clickhouseinstallationtemplates"}

var clickhouseinstallationtemplatesKind = schema.GroupVersionKind{Group: "clickhouse.radondb.com", Version: "v1", Kind: "ClickHouseInstallationTemplate"}

// Get takes name of the clickHouseInstallationTemplate, and returns the corresponding clickHouseInstallationTemplate object, and an error if there is any.
func (c *FakeClickHouseInstallationTemplates) Get(name string, options v1.GetOptions) (result *clickhouseradondbcomv1.ClickHouseInstallationTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(clickhouseinstallationtemplatesResource, c.ns, name), &clickhouseradondbcomv1.ClickHouseInstallationTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplate), err
}

// List takes label and field selectors, and returns the list of ClickHouseInstallationTemplates that match those selectors.
func (c *FakeClickHouseInstallationTemplates) List(opts v1.ListOptions) (result *clickhouseradondbcomv1.ClickHouseInstallationTemplateList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(clickhouseinstallationtemplatesResource, clickhouseinstallationtemplatesKind, c.ns, opts), &clickhouseradondbcomv1.ClickHouseInstallationTemplateList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &clickhouseradondbcomv1.ClickHouseInstallationTemplateList{ListMeta: obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplateList).ListMeta}
	for _, item := range obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplateList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clickHouseInstallationTemplates.
func (c *FakeClickHouseInstallationTemplates) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(clickhouseinstallationtemplatesResource, c.ns, opts))

}

// Create takes the representation of a clickHouseInstallationTemplate and creates it.  Returns the server's representation of the clickHouseInstallationTemplate, and an error, if there is any.
func (c *FakeClickHouseInstallationTemplates) Create(clickHouseInstallationTemplate *clickhouseradondbcomv1.ClickHouseInstallationTemplate) (result *clickhouseradondbcomv1.ClickHouseInstallationTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(clickhouseinstallationtemplatesResource, c.ns, clickHouseInstallationTemplate), &clickhouseradondbcomv1.ClickHouseInstallationTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplate), err
}

// Update takes the representation of a clickHouseInstallationTemplate and updates it. Returns the server's representation of the clickHouseInstallationTemplate, and an error, if there is any.
func (c *FakeClickHouseInstallationTemplates) Update(clickHouseInstallationTemplate *clickhouseradondbcomv1.ClickHouseInstallationTemplate) (result *clickhouseradondbcomv1.ClickHouseInstallationTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(clickhouseinstallationtemplatesResource, c.ns, clickHouseInstallationTemplate), &clickhouseradondbcomv1.ClickHouseInstallationTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplate), err
}

// Delete takes name of the clickHouseInstallationTemplate and deletes it. Returns an error if one occurs.
func (c *FakeClickHouseInstallationTemplates) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(clickhouseinstallationtemplatesResource, c.ns, name), &clickhouseradondbcomv1.ClickHouseInstallationTemplate{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClickHouseInstallationTemplates) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(clickhouseinstallationtemplatesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &clickhouseradondbcomv1.ClickHouseInstallationTemplateList{})
	return err
}

// Patch applies the patch and returns the patched clickHouseInstallationTemplate.
func (c *FakeClickHouseInstallationTemplates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *clickhouseradondbcomv1.ClickHouseInstallationTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(clickhouseinstallationtemplatesResource, c.ns, name, pt, data, subresources...), &clickhouseradondbcomv1.ClickHouseInstallationTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*clickhouseradondbcomv1.ClickHouseInstallationTemplate), err
}
